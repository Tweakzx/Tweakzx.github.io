<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>作业 on Tweakzx</title>
    <link>https://tweakzx.github.io/tags/%E4%BD%9C%E4%B8%9A/</link>
    <description>Recent content in 作业 on Tweakzx</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 14 Dec 2021 13:55:35 +0800</lastBuildDate><atom:link href="https://tweakzx.github.io/tags/%E4%BD%9C%E4%B8%9A/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【分布式与并行计算】并行作业-3</title>
      <link>https://tweakzx.github.io/p/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%B9%B6%E8%A1%8C%E4%BD%9C%E4%B8%9A-3/</link>
      <pubDate>Tue, 14 Dec 2021 13:55:35 +0800</pubDate>
      
      <guid>https://tweakzx.github.io/p/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%B9%B6%E8%A1%8C%E4%BD%9C%E4%B8%9A-3/</guid>
      <description>1 HPL（High Performance Linpack) 假设要使用HPL程序在4个进程上解一个4096 * 4096的方程组（4096 * 4096的矩阵加一列方程组的右端项b），按</description>
    </item>
    
    <item>
      <title>【分布式与并行计算】CUDA加速课程题目</title>
      <link>https://tweakzx.github.io/p/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97cuda%E5%8A%A0%E9%80%9F%E8%AF%BE%E7%A8%8B%E9%A2%98%E7%9B%AE/</link>
      <pubDate>Mon, 13 Dec 2021 19:03:20 +0800</pubDate>
      
      <guid>https://tweakzx.github.io/p/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97cuda%E5%8A%A0%E9%80%9F%E8%AF%BE%E7%A8%8B%E9%A2%98%E7%9B%AE/</guid>
      <description>1 加速向量加法 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;assert.h&amp;gt; inline cudaError_t checkCuda(cudaError_t result) { if (result != cudaSuccess) { fprintf(stderr, &amp;#34;CUDA Runtime Error: %s\n&amp;#34;, cudaGetErrorString(result)); assert(result == cudaSuccess); } return result; } void initWith(float num, float *a, int N) { for(int i = 0; i &amp;lt; N; ++i) { a[i] = num; } } __global__ void addVectorsInto(float *result, float *a, float *b, int N) { int initIndex = threadIdx.x</description>
    </item>
    
    <item>
      <title>【分布式与并行计算】并行作业-2</title>
      <link>https://tweakzx.github.io/p/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%B9%B6%E8%A1%8C%E4%BD%9C%E4%B8%9A-2/</link>
      <pubDate>Sat, 11 Dec 2021 18:01:26 +0800</pubDate>
      
      <guid>https://tweakzx.github.io/p/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%B9%B6%E8%A1%8C%E4%BD%9C%E4%B8%9A-2/</guid>
      <description>1 矩阵向量乘法（6分） 矩阵向量乘法(gemv)如何用OpenMP或pthread对其并行化(OpenMP和pthread任选一种即可)？假设</description>
    </item>
    
    <item>
      <title>【分布式与并行计算】并行作业-1</title>
      <link>https://tweakzx.github.io/p/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%B9%B6%E8%A1%8C%E4%BD%9C%E4%B8%9A-1/</link>
      <pubDate>Fri, 10 Dec 2021 11:28:33 +0800</pubDate>
      
      <guid>https://tweakzx.github.io/p/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%B9%B6%E8%A1%8C%E4%BD%9C%E4%B8%9A-1/</guid>
      <description>1矩阵向量乘法（4分） 讲义55页所示结果Y，如果要作为下一次矩阵向量乘法的输入X，切分到不同的列进程，并且复制到每一行进程，应如何操作？可写</description>
    </item>
    
    <item>
      <title>【分布式与并行计算】分布式作业</title>
      <link>https://tweakzx.github.io/p/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%88%86%E5%B8%83%E5%BC%8F%E4%BD%9C%E4%B8%9A/</link>
      <pubDate>Tue, 07 Dec 2021 14:21:24 +0800</pubDate>
      
      <guid>https://tweakzx.github.io/p/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%88%86%E5%B8%83%E5%BC%8F%E4%BD%9C%E4%B8%9A/</guid>
      <description>1 逻辑时钟与一致割集 下图中，直线上小黑点给出了时钟计数，请分别用Lamport 逻辑时钟和向量时钟给图上的事件设置时间戳，并给出一致割集和非一</description>
    </item>
    
  </channel>
</rss>
