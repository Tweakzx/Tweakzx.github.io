<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>练习代码 on Tweakzx</title>
    <link>https://tweakzx.github.io/tags/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/</link>
    <description>Recent content in 练习代码 on Tweakzx</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 12 Mar 2022 16:59:39 +0800</lastBuildDate><atom:link href="https://tweakzx.github.io/tags/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>自动机的实现</title>
      <link>https://tweakzx.github.io/p/%E8%87%AA%E5%8A%A8%E6%9C%BA%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sat, 12 Mar 2022 16:59:39 +0800</pubDate>
      
      <guid>https://tweakzx.github.io/p/%E8%87%AA%E5%8A%A8%E6%9C%BA%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>题目描述 请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。
函数 myAtoi(string s) 的算法如下：
 读入字符串并丢弃无用的前导空格 检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。 读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。 将前面步骤读入的这些数字转换为整数（即，&amp;ldquo;123&amp;rdquo; -&amp;gt; 123， &amp;ldquo;0032&amp;rdquo; -&amp;gt; 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。 如果整数数超过 32 位有符号整数范围 [−231, 231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。 返回整数作为最终结果。  注意：
  本题中的空白字符只包括空格字符 &#39; &#39; 。
  除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。
  示例 1：
 输入：s = &amp;ldquo;42&amp;rdquo; 输出：42 解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。 第 1 步：&amp;ldquo;42&amp;rdquo;（当前没有读入字符，因为没有前导空格） ^ 第 2 步：&amp;ldquo;42&amp;rdquo;（当前没有读入字符，因为这里不存在 &amp;lsquo;-&amp;rsquo; 或者 &amp;lsquo;+&#39;） ^ 第 3 步：&amp;ldquo;42&amp;rdquo;（读入 &amp;ldquo;42&amp;rdquo;） ^ 解析得到整数 42 。 由于 &amp;ldquo;42&amp;rdquo; 在范围 [-231, 231 - 1] 内，最终结果为 42 。</description>
    </item>
    
    <item>
      <title>Go语言之旅</title>
      <link>https://tweakzx.github.io/p/go%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%97%85/</link>
      <pubDate>Tue, 22 Feb 2022 17:20:32 +0800</pubDate>
      
      <guid>https://tweakzx.github.io/p/go%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%97%85/</guid>
      <description>旅行起点 Go 语言之旅 (go-zh.org)
上方链接是一个Go语言学习的Playground，快点击它，开启一场Go语言之旅吧
旅行开始 练习：循环与函数 为了练习函数与循环，我们来实现一个平方根函数：用牛顿法实现平方根函数。
计算机通常使用循环来计算 x 的平方根。从某个猜测的值 z 开始，我们可以根据 z² 与 x 的近似度来调整 z，产生一个更好的猜测：
z -= (z*z - x) / (2*z) 重复调整的过程，猜测的结果会越来越精确，得到的答案也会尽可能接近实际的平方根。
在提供的 func Sqrt 中实现它。无论输入是什么，对 z 的一个恰当的猜测为 1。 要开始，请重复计算 10 次并随之打印每次的 z 值。观察对于不同的值 x（1、2、3 &amp;hellip;）， 你得到的答案是如何逼近结果的，猜测提升的速度有多快。
提示：用类型转换或浮点数语法来声明并初始化一个浮点数值：
z := 1.0 z := float64(1) 然后，修改循环条件，使得当值停止改变（或改变非常小）的时候退出循环。观察迭代次数大于还是小于 10。 尝试改变 z 的初始猜测，如 x 或 x/2。你的函数结果与标准库中的 math.Sqrt 接近吗？
（注： 如果你对该算法的细节感兴趣，上面的 z² − x 是 z² 到它所要到达的值（即 x）的距离， 除以的 2z 为 z² 的导数，我们通过 z² 的变化速度来改变 z 的调整量。 这种通用方法叫做牛顿法。 它对很多函数，特别是平方根而言非常有效。）</description>
    </item>
    
  </channel>
</rss>
